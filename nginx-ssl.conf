# SHAAD Nginx Configuration with SSL

# HTTP server - redirect to HTTPS
server {
    listen 80;
    server_name myshaad.com www.myshaad.com;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    server_name myshaad.com www.myshaad.com;
    
    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/myshaad.com-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/myshaad.com-0001/privkey.pem;
    
    # Frontend
    location / {
        proxy_pass http://shaad_frontend:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # API endpoints
    location /api {
        proxy_pass http://shaad_backend:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Health check
    location /health {
        proxy_pass http://shaad_backend:3001/health;
        proxy_set_header Host $host;
    }
}

# n8n Subdomain
server {
    listen 80;
    server_name n8n.myshaad.com;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name n8n.myshaad.com;
    
    # SSL certificates for n8n subdomain
    ssl_certificate /etc/letsencrypt/live/n8n.myshaad.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/n8n.myshaad.com/privkey.pem;
    
    location / {
        proxy_pass http://shaad_n8n:5678;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }
}

# Bot Dashboard Subdomain
server {
    listen 80;
    server_name bots.myshaad.com;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name bots.myshaad.com;
    
    # SSL certificates for bots subdomain
    ssl_certificate /etc/letsencrypt/live/bots.myshaad.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/bots.myshaad.com/privkey.pem;
    
    location / {
        proxy_pass http://shaad_bot_dashboard:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Qdrant Vector Database Subdomain
server {
    listen 80;
    server_name qdrant.myshaad.com;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name qdrant.myshaad.com;
    
    # SSL certificates for Qdrant subdomain
    ssl_certificate /etc/letsencrypt/live/qdrant.myshaad.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/qdrant.myshaad.com/privkey.pem;
    
    location / {
        proxy_pass http://shaad_qdrant:6333;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS headers for Qdrant API
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            return 204;
        }
    }
}